/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@revolist/revogrid';


interface RevogrHeaderProps {
  
  /**  */
  viewportCol?: Components.RevogrHeader["viewportCol"]
  
  /**  */
  dimensionCol?: Components.RevogrHeader["dimensionCol"]
  
  /**  */
  selectionStore?: Components.RevogrHeader["selectionStore"]
  
  /**  */
  parent?: Components.RevogrHeader["parent"]
  
  /**  */
  groups?: Components.RevogrHeader["groups"]
  
  /**  */
  groupingDepth?: Components.RevogrHeader["groupingDepth"]
  
  /**  */
  canResize?: Components.RevogrHeader["canResize"]
  
  /**  */
  colData?: Components.RevogrHeader["colData"]
  
  /**  */
  columnFilter?: Components.RevogrHeader["columnFilter"]
}

interface RevogrHeaderEvents {
  
  /**  */
  initialHeaderClick: Parameters<JSX.RevogrHeader["onInitialHeaderClick"]>[0]
  
  /**  */
  headerresize: Parameters<JSX.RevogrHeader["onHeaderresize"]>[0]
  
  /**  */
  headerdblClick: Parameters<JSX.RevogrHeader["onHeaderdblClick"]>[0]
}

interface RevogrHeaderSlots {
  default: any
}
  
/* generated by Svelte v3.49.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let revogr_header;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	return {
		c() {
			revogr_header = element("revogr-header");
			if (default_slot) default_slot.c();
			set_custom_element_data(revogr_header, "parent", /*parent*/ ctx[0]);
			set_custom_element_data(revogr_header, "grouping-depth", /*groupingDepth*/ ctx[1]);
			set_custom_element_data(revogr_header, "can-resize", /*canResize*/ ctx[2]);
			set_custom_element_data(revogr_header, "column-filter", /*columnFilter*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, revogr_header, anchor);

			if (default_slot) {
				default_slot.m(revogr_header, null);
			}

			/*revogr_header_binding*/ ctx[15](revogr_header);
			current = true;

			if (!mounted) {
				dispose = [
					listen(revogr_header, "initialHeaderClick", /*onEvent*/ ctx[5]),
					listen(revogr_header, "headerresize", /*onEvent*/ ctx[5]),
					listen(revogr_header, "headerdblClick", /*onEvent*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*parent*/ 1) {
				set_custom_element_data(revogr_header, "parent", /*parent*/ ctx[0]);
			}

			if (!current || dirty & /*groupingDepth*/ 2) {
				set_custom_element_data(revogr_header, "grouping-depth", /*groupingDepth*/ ctx[1]);
			}

			if (!current || dirty & /*canResize*/ 4) {
				set_custom_element_data(revogr_header, "can-resize", /*canResize*/ ctx[2]);
			}

			if (!current || dirty & /*columnFilter*/ 8) {
				set_custom_element_data(revogr_header, "column-filter", /*columnFilter*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(revogr_header);
			if (default_slot) default_slot.d(detaching);
			/*revogr_header_binding*/ ctx[15](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { viewportCol = undefined } = $$props;
	let { dimensionCol = undefined } = $$props;
	let { selectionStore = undefined } = $$props;
	let { parent = undefined } = $$props;
	let { groups = undefined } = $$props;
	let { groupingDepth = undefined } = $$props;
	let { canResize = undefined } = $$props;
	let { colData = undefined } = $$props;
	let { columnFilter = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(12, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function revogr_header_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('viewportCol' in $$props) $$invalidate(6, viewportCol = $$props.viewportCol);
		if ('dimensionCol' in $$props) $$invalidate(7, dimensionCol = $$props.dimensionCol);
		if ('selectionStore' in $$props) $$invalidate(8, selectionStore = $$props.selectionStore);
		if ('parent' in $$props) $$invalidate(0, parent = $$props.parent);
		if ('groups' in $$props) $$invalidate(9, groups = $$props.groups);
		if ('groupingDepth' in $$props) $$invalidate(1, groupingDepth = $$props.groupingDepth);
		if ('canResize' in $$props) $$invalidate(2, canResize = $$props.canResize);
		if ('colData' in $$props) $$invalidate(10, colData = $$props.colData);
		if ('columnFilter' in $$props) $$invalidate(3, columnFilter = $$props.columnFilter);
		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, viewportCol*/ 4160) {
			$: if (__mounted) setProp('viewportCol', viewportCol);
		}

		if ($$self.$$.dirty & /*__mounted, dimensionCol*/ 4224) {
			$: if (__mounted) setProp('dimensionCol', dimensionCol);
		}

		if ($$self.$$.dirty & /*__mounted, selectionStore*/ 4352) {
			$: if (__mounted) setProp('selectionStore', selectionStore);
		}

		if ($$self.$$.dirty & /*__mounted, groups*/ 4608) {
			$: if (__mounted) setProp('groups', groups);
		}

		if ($$self.$$.dirty & /*__mounted, colData*/ 5120) {
			$: if (__mounted) setProp('colData', colData);
		}
	};

	return [
		parent,
		groupingDepth,
		canResize,
		columnFilter,
		__ref,
		onEvent,
		viewportCol,
		dimensionCol,
		selectionStore,
		groups,
		colData,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		revogr_header_binding
	];
}

class RevogrHeader extends SvelteComponent {
  $$prop_def: RevogrHeaderProps;
  $$events_def: RevogrHeaderEvents;
  $$slot_def: RevogrHeaderSlots;

  $on<K extends keyof RevogrHeaderEvents>(type: K, callback: (e: RevogrHeaderEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RevogrHeaderProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			viewportCol: 6,
			dimensionCol: 7,
			selectionStore: 8,
			parent: 0,
			groups: 9,
			groupingDepth: 1,
			canResize: 2,
			colData: 10,
			columnFilter: 3,
			getWebComponent: 11
		});
	}

	get getWebComponent(): HTMLRevogrHeaderElement | undefined {
		return this.$$.ctx[11];
	}
}

export default RevogrHeader;